@using Toilet2.Controllers;
@using FontAwesome.Sharp;


@{
    ViewBag.Title = "About";
    var general_data = (QuickType.Item[])ViewData["Item"];
}

<link href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" rel="stylesheet" />

<link href="https://fonts.googleapis.com/css?family=Roboto:300,300i,500" rel="stylesheet" />

<link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet" />
<link href="~/lib/font-awesome/css/all.css" rel="stylesheet" />

<!--
<h2>@ViewBag.Title.</h2>
<h3>@ViewBag.Message</h3>
    -->
<!--<h1 style="text-align: center;"> Watchlist</h1>
<br>-->
<body>
    <section>
        <div class="container" style="margin-bottom:80px">
            <div class="row">
                <div class="col-lg-12">
                    <nav class="navbar navbar-expand-lg navbar-light bg-light">
                        <a class="navbar-brand">

                            <img src="~/images/Logo.png" />
                        </a>
                        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"
                                aria-expanded="false" aria-label="Toggle navigation">
                            <span class="navbar-toggler-icon"></span>
                        </button>

                        <div class="collapse navbar-collapse" id="navbarSupportedContent">
                            <ul class="navbar-nav ml-auto">
                                <li class="nav-item">
                                    <a class="nav-link" @Html.ActionLink("Home", "Index", "Home")
                                        <span class="sr-only">(current)</span>
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="nav-link" @Html.ActionLink("Tables", "About", "Home")</a>
                                </li>

                            </ul>
                        </div>
                    </nav>
                </div>
            </div>
        </div>
    </section>


    <table border="0" cellspacing="5" cellpadding="5" style="margin-bottom: 10px">
        <tbody>
            <tr>
                <td><b>Bathroom ID:</b></td>
                <td><input type="text" id="Bath_ID" name="Bath_ID"></td>
            </tr>

        </tbody>

        <tbody>
            <tr>
                <td><b>Min Level:</b></td>
                <td><input type="text" id="min" name="min"></td>
                <td><b>Max Level:</b></td>
                <td><input type="text" id="max" name="max"></td>
            </tr>

        </tbody>
    </table>
    <!-- A button to open the popup form -->
    <button class="open-button" onclick="openForm()">Open Form</button>

    <!-- The form -->


    <table class="table responsive" style="margin-top:20px" id="sort">
        <thead>
            <tr>
                <th scope="col">id</th>
                <th scope="col">Level</th>
                <th scope="col">Battery Percentage</th>
                <th scope="col">Bathroom # </th>
                <th scope="col">Type</th>
                <th scope="col">Time</th>
                <th scope="col">Mac Address</th>
            </tr>
        </thead>
        <tbody>



            @{

                /*var new_data = general_data.OrderBy(item => item.Disid);*/
                foreach (QuickType.Item data in general_data)
                {
                    <tr>
                        <th scope="row" data-table-header="id">@data.Disid</th>

                        <td data-table-header="Level">@data.Level</td>
                        <td data-table-header="Battery">@data.Battery%</td>
                        <td>@data.Bathid</td>
                        @if (data.Distype == "soap")
                        {

                            <td><i class="fa-solid fa-pump-soap"></i></td>
                        }
                        else if (data.Distype == "towel")
                        {
                            <td><i class="fa-solid fa-hand"></i></td>
                        }
                        else
                        {
                            <td><i class="fa-solid fa-toilet-paper"></i></td>
                        }


                        <td>@data.Update.Substring(0, 19).Replace("T", " Time: ")</td>
                        <td>@data.Addr</td>
                    </tr>
                }

            }

        </tbody>
    </table>
    <style>
        body {
            font-family: Arial, Helvetica, sans-serif;
        }

        * {
            box-sizing: border-box;
        }

        /* Button used to open the contact form - fixed at the bottom of the page */
        .open-button {
            background-color: #555;
            color: white;
            padding: 16px 20px;
            border: none;
            cursor: pointer;
            opacity: 0.8;
            position: fixed;
            bottom: 23px;
            right: 28px;
            width: 280px;
        }

        /* The popup form - hidden by default */
        .form-popup {
            display: none;
            position: fixed;
            bottom: 0;
            right: 15px;
            border: 3px solid #f1f1f1;
            z-index: 9;
        }

        /* Add styles to the form container */
        .form-container {
            max-width: 300px;
            padding: 10px;
            background-color: white;
        }

            /* Full-width input fields */
            .form-container input[type=text], .form-container input[type=password] {
                width: 100%;
                padding: 15px;
                margin: 5px 0 22px 0;
                border: none;
                background: #f1f1f1;
            }

                /* When the inputs get focus, do something */
                .form-container input[type=text]:focus, .form-container input[type=password]:focus {
                    background-color: #ddd;
                    outline: none;
                }

            /* Set a style for the submit/login button */
            .form-container .btn {
                background-color: #04AA6D;
                color: white;
                padding: 16px 20px;
                border: none;
                cursor: pointer;
                width: 100%;
                margin-bottom: 10px;
                opacity: 0.8;
            }

            /* Add a red background color to the cancel button */
            .form-container .cancel {
                background-color: red;
            }

            /* Add some hover effects to buttons */
            .form-container .btn:hover, .open-button:hover {
                opacity: 1;
            }
    </style>
    </head>
    <body>

       
       

        <button class="open-button" onclick="openForm()">Add Dispensers</button>

        <div class="form-popup" id="sampleForm">
            <form action="/action_page.php" class="form-container">
                <h1></h1>

                <label for="mac_address"><b>MAC Address</b></label>
                <input id="mac_address"type="text" placeholder="Enter Enter Mac Address" name="Mac Address" required>

               



                <label for="dispenser_type"><b>Dispenser Type</b></label>
                <input id="dispenser_type "type="text" placeholder="Enter Dispenser Type" name="Dispenser Type" required>

                <label for="bathroom_id"><b>Bathroom ID</b></label>
                <input id ="bathroom_id" type="text" placeholder="Enter Bathroom ID" name="Bathroom ID" required>

                <button type="submit" class="btn">Create</button>
                <button type="button" class="btn cancel" onclick="closeForm()">Close</button>
            </form>
        </div>


        <script>

            function openForm() {
                $.noConflict();
                document.getElementById("sampleForm").style.display = "block";
            }

            function closeForm() {
                $.noConflict();
                document.getElementById("sampleForm").style.display = "none";
            }


            /*--Event Listeners--*/
            const sampleForm = document.querySelector("#sampleForm");
            $.noConflict();
            if (sampleForm) {
                sampleForm.addEventListener("submit", function (e) {
                    submitForm(e, this);
                });
            }
            /*--Functions--*/
            async function submitForm(e, form) {
                $.noConflict();
                // 1. Prevent reloading page
                e.preventDefault();
                // 2. Submit the form
                // 2.1 User Interaction
                const btnSubmit = document.getElementById('btnSubmit');
                btnSubmit.disabled = true;
                setTimeout(() => btnSubmit.disabled = false, 2000);
                // 2.2 Build JSON body
                const jsonFormData = buildJsonFormData(form);
                // 2.3 Build Headers
                const headers = buildHeaders();
                // 2.4 Request & Response
                const response = await fetchService.performPostHttpsRequest(`https://node-express-env.eba-8bxzmgph.us-east-1.elasticbeanstalk.com/dispensers/create?`, headers, jsonFormData); // Uses JSON Placeholder
                console.log(response);
                // 2.5 Inform user of result
                if (response)
                    window.location = `/bathroom_id=${response.bathroom_id}&Level=0&battery_level=0&mac_address=${response.mac_address}&dispenser_type=${response.dispenser_type}`;
                else
                    alert(`An error occured.`);
            }
            function buildJsonFormData(form) {
                $.noConflict();
                const jsonFormData = {};
                for (const pair of new FormData(form)) {
                    jsonFormData[pair[0]] = pair[1];
                }
                return jsonFormData;
            }
            function buildHeaders(authorization = null) {
                $.noConflict();
                const headers = {
                    "Content-Type": "application/json",
                    "Authorization": (authorization) ? authorization : "Bearer TOKEN_MISSING"
                };
                return headers;
            }


            export default class FetchService {
                constructor() {

                }



            async performPostHttpsRequest(fetchLink, headers, body) {
                if (!fetchLink || !headers || !body) {
                    throw new Error("One or more POST request parameters was not passed.");
                }
                try {
                    const rawResponse = await fetch(fetchLink, {
                        method: "POST",
                        headers: headers,
                        body: JSON.stringify(body)
                    });
                    const content = await rawResponse.json();
                    return content;
                }
                catch (err) {
                    console.error(`Error at fetch POST: ${err}`);
                    throw err;
                }
            }

        }
            
        </script>






    </body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.12/js/jquery.dataTables.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/datatables/1.10.12/js/dataTables.bootstrap.min.js"></script>
    <script src "https://cdn.datatables.net/plug-ins/1.10.15/sorting/stringMonthYear.js"></script>
    <script>
        $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
            var min = parseInt($('#Bath_ID').val(), 10);
            var age = parseFloat(data[2]) || 0; // use data for the age column

            if (
                (isNaN(min) && isNaN(min)) ||
                (isNaN(min) && age <= min) ||
                (min <= age && isNaN(min)) ||
                (min <= age && age <= min)
            ) {
                return true;
            }
            return false;
        });

        $.fn.dataTable.ext.search.push(function (settings, data, dataIndex) {
            var min = parseInt($('#min').val(), 10);
            var max = parseInt($('#max').val(), 10);
            var age = parseFloat(data[1]) || 0; // use data for the age column

            if (
                (isNaN(min) && isNaN(max)) ||
                (isNaN(min) && age <= max) ||
                (min <= age && isNaN(max)) ||
                (min <= age && age <= max)
            ) {
                return true;
            }
            return false;
        });





        /*$(document).ready(function () {
            $.noConflict();
            $("#sort").DataTable({
                columnDefs: [
                    { type: 'date', targets: [3] }
                ],
            });
        });*/

        $(document).ready(function () {
            $.noConflict();
            var table = $('#sort').DataTable();

            // Event listener to the two range filtering inputs to redraw on input
            $('#Bath_ID, #min, #max').keyup(function () {
                table.draw();
            });

        });


    </script>
    <!-- Output entire data as Json String -->
    <!--  <h3> <b>http request example: </b> <br /> @ViewBag.Message</h3>  -->
